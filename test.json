
		{
			"id": 1,
			"name": "Debian Docker Manager",
			"description": "Monitors and manages Docker containers on Debian systems via SSH",
			"version": "1.0.0",
			"author": "Your Name",
			"code": "from app.plugins.base import BasePlugin\nimport asyncio\nimport asyncssh\nfrom typing import Dict, Any, List, Optional\nimport json\n\nclass DebianDockerPlugin(BasePlugin):\n    \"\"\"\n    Plugin for monitoring Docker containers on Debian systems via SSH.\n    \n    This plugin connects to a Debian server via SSH and retrieves information\n    about running Docker containers. It also provides operations to manage\n    containers (start, stop, restart).\n    \"\"\"\n    \n    @property\n    def name(self) -> str:\n        return \"Debian Docker Manager\"\n    \n    @property\n    def version(self) -> str:\n        return \"1.0.0\"\n    \n    @property\n    def description(self) -> str:\n        return \"Monitors and manages Docker containers on Debian systems via SSH\"\n    \n    @property\n    def ui_schema(self) -> Dict[str, Any]:\n        return {\n            \"title\": \"Debian Docker Manager\",\n            \"description\": \"Manage Docker containers on a Debian server\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"connection\": {\n                    \"type\": \"object\",\n                    \"title\": \"Connection Settings\",\n                    \"required\": [\"hostname\", \"username\"],\n                    \"properties\": {\n                        \"hostname\": {\n                            \"type\": \"string\",\n                            \"title\": \"Hostname/IP\",\n                            \"description\": \"The hostname or IP address of the Debian server\"\n                        },\n                        \"port\": {\n                            \"type\": \"number\",\n                            \"title\": \"SSH Port\",\n                            \"description\": \"SSH port (default: 22)\",\n                            \"default\": 22\n                        },\n                        \"username\": {\n                            \"type\": \"string\",\n                            \"title\": \"Username\",\n                            \"description\": \"SSH username\"\n                        },\n                        \"password\": {\n                            \"type\": \"string\",\n                            \"title\": \"Password\",\n                            \"description\": \"SSH password (leave empty if using key authentication)\",\n                            \"format\": \"password\"\n                        },\n                        \"private_key\": {\n                            \"type\": \"string\",\n                            \"title\": \"Private Key\",\n                            \"description\": \"SSH private key (leave empty if using password authentication)\",\n                            \"format\": \"textarea\"\n                        }\n                    }\n                }\n            },\n            \"components\": {\n                \"container_list\": {\n                    \"type\": \"table\",\n                    \"title\": \"Docker Containers\",\n                    \"columns\": [\n                        {\"key\": \"container_id\", \"title\": \"Container ID\"},\n                        {\"key\": \"name\", \"title\": \"Name\"},\n                        {\"key\": \"image\", \"title\": \"Image\"},\n                        {\"key\": \"status\", \"title\": \"Status\"},\n                        {\"key\": \"created\", \"title\": \"Created\"}\n                    ],\n                    \"actions\": [\n                        {\n                            \"title\": \"Start\",\n                            \"action\": \"start_container\",\n                            \"enabledWhen\": \"row.status.includes('Exited')\",\n                            \"buttonType\": \"success\"\n                        },\n                        {\n                            \"title\": \"Stop\",\n                            \"action\": \"stop_container\",\n                            \"enabledWhen\": \"row.status.includes('Up')\",\n                            \"buttonType\": \"warning\"\n                        },\n                        {\n                            \"title\": \"Restart\",\n                            \"action\": \"restart_container\",\n                            \"enabledWhen\": \"row.status.includes('Up')\",\n                            \"buttonType\": \"info\"\n                        },\n                        {\n                            \"title\": \"Logs\",\n                            \"action\": \"view_logs\",\n                            \"buttonType\": \"secondary\"\n                        }\n                    ]\n                },\n                \"system_info\": {\n                    \"type\": \"panel\",\n                    \"title\": \"System Information\",\n                    \"properties\": [\n                        {\"key\": \"docker_version\", \"title\": \"Docker Version\"},\n                        {\"key\": \"docker_api_version\", \"title\": \"Docker API Version\"},\n                        {\"key\": \"os_version\", \"title\": \"OS Version\"},\n                        {\"key\": \"kernel_version\", \"title\": \"Kernel Version\"}\n                    ]\n                }\n            }\n        }\n    \n    async def connect(self, params: Dict[str, Any]) -> bool:\n        \"\"\"\n        Connect to the Debian server via SSH.\n        \n        Args:\n            params: Connection parameters (hostname, port, username, password/key)\n            \n        Returns:\n            True if connection successful, False otherwise\n        \"\"\"\n        try:\n            # Validate required parameters\n            if not params.get(\"hostname\") or not params.get(\"username\"):\n                return False\n            \n            conn_params = {\n                \"host\": params[\"hostname\"],\n                \"port\": params.get(\"port\", 22),\n                \"username\": params[\"username\"]\n            }\n            \n            # Add authentication\n            if params.get(\"password\"):\n                conn_params[\"password\"] = params[\"password\"]\n            elif params.get(\"private_key\"):\n                conn_params[\"client_keys\"] = [asyncssh.import_private_key(params[\"private_key\"])]\n            \n            # Test connection\n            async with asyncssh.connect(**conn_params):\n                return True\n                \n        except Exception as e:\n            print(f\"Connection error: {str(e)}\")\n            return False\n    \n    async def get_status(self, params: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Get Docker system status and version information.\n        \n        Args:\n            params: Connection parameters\n            \n        Returns:\n            Dictionary with Docker and system information\n        \"\"\"\n        try:\n            conn_params = {\n                \"host\": params[\"hostname\"],\n                \"port\": params.get(\"port\", 22),\n                \"username\": params[\"username\"]\n            }\n            \n            # Add authentication\n            if params.get(\"password\"):\n                conn_params[\"password\"] = params[\"password\"]\n            elif params.get(\"private_key\"):\n                conn_params[\"client_keys\"] = [asyncssh.import_private_key(params[\"private_key\"])]\n            \n            async with asyncssh.connect(**conn_params) as conn:\n                # Get Docker version\n                docker_version_result = await conn.run(\"docker version --format '{{json .}}'\")\n                \n                if docker_version_result.exit_status != 0:\n                    return {\"error\": \"Failed to get Docker version\"}\n                \n                try:\n                    docker_info = json.loads(docker_version_result.stdout)\n                except json.JSONDecodeError:\n                    docker_info = {}\n                \n                # Get OS version\n                os_version_result = await conn.run(\"cat /etc/os-release | grep PRETTY_NAME\")\n                os_version = os_version_result.stdout.split('=')[1].strip('\"') if os_version_result.exit_status == 0 else \"Unknown\"\n                \n                # Get kernel version\n                kernel_version_result = await conn.run(\"uname -r\")\n                kernel_version = kernel_version_result.stdout.strip() if kernel_version_result.exit_status == 0 else \"Unknown\"\n                \n                return {\n                    \"docker_version\": docker_info.get(\"Server\", {}).get(\"Version\", \"Unknown\"),\n                    \"docker_api_version\": docker_info.get(\"Server\", {}).get(\"ApiVersion\", \"Unknown\"),\n                    \"os_version\": os_version,\n                    \"kernel_version\": kernel_version,\n                    \"status\": \"Connected\",\n                    \"error\": None\n                }\n                \n        except Exception as e:\n            return {\n                \"status\": \"Error\",\n                \"error\": str(e)\n            }\n    \n    async def get_metrics(self, params: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Get Docker container metrics and status.\n        \n        Args:\n            params: Connection parameters\n            \n        Returns:\n            Dictionary with container information and system metrics\n        \"\"\"\n        try:\n            conn_params = {\n                \"host\": params[\"hostname\"],\n                \"port\": params.get(\"port\", 22),\n                \"username\": params[\"username\"]\n            }\n            \n            # Add authentication\n            if params.get(\"password\"):\n                conn_params[\"password\"] = params[\"password\"]\n            elif params.get(\"private_key\"):\n                conn_params[\"client_keys\"] = [asyncssh.import_private_key(params[\"private_key\"])]\n            \n            async with asyncssh.connect(**conn_params) as conn:\n                # Get container list\n                containers_result = await conn.run(\n                    'docker ps -a --format \"{{json .}}\"'\n                )\n                \n                if containers_result.exit_status != 0:\n                    return {\"error\": \"Failed to get container list\"}\n                \n                containers = []\n                for line in containers_result.stdout.splitlines():\n                    if line.strip():\n                        try:\n                            container = json.loads(line)\n                            containers.append({\n                                \"container_id\": container.get(\"ID\", \"\"),\n                                \"name\": container.get(\"Names\", \"\"),\n                                \"image\": container.get(\"Image\", \"\"),\n                                \"status\": container.get(\"Status\", \"\"),\n                                \"created\": container.get(\"CreatedAt\", \"\"),\n                                \"ports\": container.get(\"Ports\", \"\")\n                            })\n                        except json.JSONDecodeError:\n                            pass\n                \n                # Get system stats (CPU, memory usage)\n                stats_result = await conn.run(\n                    'docker stats --no-stream --format \"{{json .}}\"'\n                )\n                \n                stats = []\n                if stats_result.exit_status == 0:\n                    for line in stats_result.stdout.splitlines():\n                        if line.strip():\n                            try:\n                                stat = json.loads(line)\n                                stats.append(stat)\n                            except json.JSONDecodeError:\n                                pass\n                \n                # Get disk usage\n                disk_usage_result = await conn.run('docker system df -v --format \"{{json .}}\"')\n                disk_usage = None\n                if disk_usage_result.exit_status == 0:\n                    try:\n                        disk_usage = json.loads(disk_usage_result.stdout)\n                    except json.JSONDecodeError:\n                        pass\n                \n                return {\n                    \"containers\": containers,\n                    \"container_stats\": stats,\n                    \"disk_usage\": disk_usage,\n                    \"container_count\": len(containers),\n                    \"running_count\": sum(1 for c in containers if \"Up\" in c.get(\"status\", \"\")),\n                    \"stopped_count\": sum(1 for c in containers if \"Exited\" in c.get(\"status\", \"\")),\n                    \"error\": None\n                }\n                \n        except Exception as e:\n            return {\n                \"error\": str(e),\n                \"containers\": [],\n                \"container_stats\": [],\n                \"disk_usage\": None\n            }\n    \n    def get_operations(self) -> List[Dict[str, Any]]:\n        \"\"\"Return available operations for this plugin\"\"\"\n        return [\n            {\n                \"id\": \"start_container\",\n                \"name\": \"Start Container\",\n                \"description\": \"Start a stopped Docker container\",\n                \"params\": [\"container_id\"]\n            },\n            {\n                \"id\": \"stop_container\",\n                \"name\": \"Stop Container\",\n                \"description\": \"Stop a running Docker container\",\n                \"params\": [\"container_id\"]\n            },\n            {\n                \"id\": \"restart_container\",\n                \"name\": \"Restart Container\",\n                \"description\": \"Restart a Docker container\",\n                \"params\": [\"container_id\"]\n            },\n            {\n                \"id\": \"view_logs\",\n                \"name\": \"View Container Logs\",\n                \"description\": \"View logs for a Docker container\",\n                \"params\": [\"container_id\", \"lines\"]\n            },\n            {\n                \"id\": \"prune_system\",\n                \"name\": \"Prune System\",\n                \"description\": \"Remove unused Docker data\",\n                \"params\": []\n            }\n        ]\n    \n    async def execute_operation(self, operation_id: str, params: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"\n        Execute a Docker operation.\n        \n        Args:\n            operation_id: The operation to execute\n            params: Operation parameters including connection details\n            \n        Returns:\n            Operation result\n        \"\"\"\n        try:\n            # Extract connection parameters\n            conn_params = {\n                \"host\": params[\"hostname\"],\n                \"port\": params.get(\"port\", 22),\n                \"username\": params[\"username\"]\n            }\n            \n            # Add authentication\n            if params.get(\"password\"):\n                conn_params[\"password\"] = params[\"password\"]\n            elif params.get(\"private_key\"):\n                conn_params[\"client_keys\"] = [asyncssh.import_private_key(params[\"private_key\"])]\n            \n            async with asyncssh.connect(**conn_params) as conn:\n                if operation_id == \"start_container\":\n                    if not params.get(\"container_id\"):\n                        return {\"error\": \"Container ID is required\"}\n                    \n                    result = await conn.run(f\"docker start {params['container_id']}\")\n                    if result.exit_status == 0:\n                        return {\"success\": True, \"message\": f\"Container {params['container_id']} started successfully\"}\n                    return {\"success\": False, \"error\": result.stderr}\n                \n                elif operation_id == \"stop_container\":\n                    if not params.get(\"container_id\"):\n                        return {\"error\": \"Container ID is required\"}\n                    \n                    result = await conn.run(f\"docker stop {params['container_id']}\")\n                    if result.exit_status == 0:\n                        return {\"success\": True, \"message\": f\"Container {params['container_id']} stopped successfully\"}\n                    return {\"success\": False, \"error\": result.stderr}\n                \n                elif operation_id == \"restart_container\":\n                    if not params.get(\"container_id\"):\n                        return {\"error\": \"Container ID is required\"}\n                    \n                    result = await conn.run(f\"docker restart {params['container_id']}\")\n                    if result.exit_status == 0:\n                        return {\"success\": True, \"message\": f\"Container {params['container_id']} restarted successfully\"}\n                    return {\"success\": False, \"error\": result.stderr}\n                \n                elif operation_id == \"view_logs\":\n                    if not params.get(\"container_id\"):\n                        return {\"error\": \"Container ID is required\"}\n                    \n                    lines = params.get(\"lines\", 100)\n                    result = await conn.run(f\"docker logs --tail {lines} {params['container_id']}\")\n                    if result.exit_status == 0:\n                        return {\n                            \"success\": True,\n                            \"logs\": result.stdout,\n                            \"container_id\": params['container_id']\n                        }\n                    return {\"success\": False, \"error\": result.stderr}\n                \n                elif operation_id == \"prune_system\":\n                    result = await conn.run(\"docker system prune -f\")\n                    if result.exit_status == 0:\n                        return {\n                            \"success\": True,\n                            \"message\": \"Docker system pruned successfully\",\n                            \"details\": result.stdout\n                        }\n                    return {\"success\": False, \"error\": result.stderr}\n                \n                else:\n                    return {\"error\": f\"Unknown operation: {operation_id}\"}\n                \n        except Exception as e:\n            return {\"error\": str(e)}\n",
			"ui_schema": "{\"title\": \"Debian Docker Manager\", \"description\": \"Manage Docker containers on a Debian server\", \"type\": \"object\", \"properties\": {\"connection\": {\"type\": \"object\", \"title\": \"Connection Settings\", \"required\": [\"hostname\", \"username\"], \"properties\": {\"hostname\": {\"type\": \"string\", \"title\": \"Hostname/IP\", \"description\": \"The hostname or IP address of the Debian server\"}, \"port\": {\"type\": \"number\", \"title\": \"SSH Port\", \"description\": \"SSH port (default: 22)\", \"default\": 22}, \"username\": {\"type\": \"string\", \"title\": \"Username\", \"description\": \"SSH username\"}, \"password\": {\"type\": \"string\", \"title\": \"Password\", \"description\": \"SSH password (leave empty if using key authentication)\", \"format\": \"password\"}, \"private_key\": {\"type\": \"string\", \"title\": \"Private Key\", \"description\": \"SSH private key (leave empty if using password authentication)\", \"format\": \"textarea\"}}}}}",
			"created_at": "2025-04-28 17:54:07.624363",
			"updated_at": "2025-04-28 17:54:07.624363",
			"is_active": 1
		}